<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Min&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-05-10T14:09:53.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Min</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Consul入门07 － Consul Web界面</title>
    <link href="http://yoursite.com/2016/05/09/Consul-Getting-Started-07-Consul-Web-Ui/"/>
    <id>http://yoursite.com/2016/05/09/Consul-Getting-Started-07-Consul-Web-Ui/</id>
    <published>2016-05-09T07:13:00.000Z</published>
    <updated>2016-05-10T14:09:53.000Z</updated>
    
    <content type="html">&lt;p&gt;Consul还带来了一个界面美观，功能强大的，开箱即用的Web界面。通过该界面我们可以查看所有的服务以及节点，查看所有的健康监测及其当前的状态，以及读取和设置键/值数据。该Web界面自动支持多数据中心。&lt;/p&gt;
&lt;p&gt;有俩个方法来运行Web界面：使用&lt;a href=&quot;https://atlas.hashicorp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Atlas by HashiCorp&lt;/a&gt;主机以及使用自有主机&lt;/p&gt;
&lt;h2 id=&quot;使用Atlas主机&quot;&gt;&lt;a href=&quot;#使用Atlas主机&quot; class=&quot;headerlink&quot; title=&quot;使用Atlas主机&quot;&gt;&lt;/a&gt;使用Atlas主机&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/consul-getting-started/atlas_web_ui.png&quot; alt=&quot;atlas web ui&quot;&gt;&lt;/p&gt;
&lt;p&gt;你必须在你的配置中增加两个字段来设置使用Atlas界面：&lt;a href=&quot;https://www.consul.io/docs/agent/options.html#_atlas&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;你Atlas infrastructure的名字&lt;/a&gt;以及&lt;a href=&quot;https://www.consul.io/docs/agent/options.html#_atlas_token&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;你的Atlas token&lt;/a&gt;。下面的例子就是在调用Consul代理的命令行中提供这些设置：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ consul agent -atlas=ATLAS_USERNAME/demo -atlas-token=&lt;span class=&quot;string&quot;&gt;&quot;ATLAS_TOKEN&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了取得一个Atlas用户名和token，创建一个&lt;a href=&quot;https://atlas.hashicorp.com/account/new?utm_source=oss&amp;amp;utm_medium=getting-started-ui&amp;amp;utm_campaign=consul&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;账号&lt;/a&gt;并且在Consul配置中使用你的凭证值来替换这些上面各自的值。&lt;/p&gt;
&lt;p&gt;你可以浏览&lt;a href=&quot;https://atlas.hashicorp.com/hashicorp/environments/consul-demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个&lt;/a&gt;在线演示。&lt;/p&gt;
&lt;h2 id=&quot;采用自有主机&quot;&gt;&lt;a href=&quot;#采用自有主机&quot; class=&quot;headerlink&quot; title=&quot;采用自有主机&quot;&gt;&lt;/a&gt;采用自有主机&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/consul-getting-started/consul_web_ui.png&quot; alt=&quot;consul web ui&quot;&gt;&lt;/p&gt;
&lt;p&gt;启动Consul代理并设置 &lt;em&gt;-ui&lt;/em&gt; 参数来启动自有主机的界面：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ consul agent -ui&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该界面被映射到 &lt;em&gt;/ui&lt;/em&gt; HTTP路径上，和HTTP API使用相同的端口。默认下就是 &lt;em&gt;&lt;a href=&quot;http://localhost:8500/ui&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8500/ui&lt;/a&gt;&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;你可以在&lt;a href=&quot;http://demo.consul.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;浏览到Consul Web界面在线的演示。&lt;/p&gt;
&lt;p&gt;这个在线演示可以访问素有数据中心的数据，我们也同样设计了几个特殊的数据中心用作演示：&lt;a href=&quot;http://ams2.demo.consul.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AMS2&lt;/a&gt;(Amsterdam)，&lt;a href=&quot;http://sfo1.demo.consul.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SFO1&lt;/a&gt;(San Francisco)，以及&lt;a href=&quot;http://nyc3.demo.consul.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NYC3&lt;/a&gt;(New York)。&lt;/p&gt;
&lt;h2 id=&quot;下一步&quot;&gt;&lt;a href=&quot;#下一步&quot; class=&quot;headerlink&quot; title=&quot;下一步&quot;&gt;&lt;/a&gt;下一步&lt;/h2&gt;&lt;p&gt;这是我们这篇入门指南的最后部分，浏览&lt;a href=&quot;https://www.consul.io/intro/getting-started/next-steps.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下一步&lt;/a&gt;来学习更多关于如何在Consul里的知识！&lt;/p&gt;
&lt;p&gt;翻译自&lt;a href=&quot;https://www.consul.io/intro/getting-started/ui.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Consul还带来了一个界面美观，功能强大的，开箱即用的Web界面。通过该界面我们可以查看所有的服务以及节点，查看所有的健康监测及其当前的状态，以及读取和设置键/值数据。该Web界面自动支持多数据中心。&lt;/p&gt;
&lt;p&gt;有俩个方法来运行Web界面：使用&lt;a href=&quot;htt
    
    </summary>
    
      <category term="Development" scheme="http://yoursite.com/categories/Development/"/>
    
    
      <category term="Consul" scheme="http://yoursite.com/tags/Consul/"/>
    
      <category term="MicroService" scheme="http://yoursite.com/tags/MicroService/"/>
    
  </entry>
  
  <entry>
    <title>如何使用ELK来监控性能</title>
    <link href="http://yoursite.com/2016/05/04/How-to-Use-ELK-to-Monitor-Performance/"/>
    <id>http://yoursite.com/2016/05/04/How-to-Use-ELK-to-Monitor-Performance/</id>
    <published>2016-05-04T02:21:00.000Z</published>
    <updated>2016-05-05T13:58:21.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/elk-howto/Screen-Shot-2015-06-29-at-3.36.19-PM-1024x451.png&quot; alt=&quot;EKL GUI&quot;&gt;&lt;/p&gt;
&lt;p&gt;每当我解决一些应用性能问题的时候，我常常会看到一个服务由于高的CPU利用率而使得一台或者多台服务器运行变得非常缓慢。这也许意味着它因为高负载而导致资源缺乏，但是通常情况下这其实是代码有bug，一个异常或者一个错误的流程导致过多占用了系统资源。为了把这些问题找出来，我不得不在NewRelic/Nagios和ELK之间查看信息。&lt;/p&gt;
&lt;p&gt;所以我确信我需要有一个单一的管理面板来查看从各个应用，操作系统以及网络设备上收集来的事件组合而成的性能指标&lt;/p&gt;
&lt;p&gt;为了使用ELK来监控你平台的性能，你需要集成一系列的工具。Probes是必须包含的组件，它运行在各个主机上用来收集各种系统性能指标。然后，采集的数据需要发送给Logstash，然后在Elasticsearch中进行聚集，最后由Kibana转换成图形。最终，软件服务操作组成员使用这些图形展示系统性能。在这篇文章中，我将分享我们如何建构我们的ELK软件栈来监控服务的性能。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-收集和传送&quot;&gt;&lt;a href=&quot;#1-收集和传送&quot; class=&quot;headerlink&quot; title=&quot;1. 收集和传送&quot;&gt;&lt;/a&gt;1. 收集和传送&lt;/h2&gt;&lt;h3 id=&quot;收集&quot;&gt;&lt;a href=&quot;#收集&quot; class=&quot;headerlink&quot; title=&quot;收集&quot;&gt;&lt;/a&gt;收集&lt;/h3&gt;&lt;p&gt;在收集和传送数据到Logstash中的第一个步骤，我们使用一个名为 &lt;a href=&quot;http://collectl.sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Collectl&lt;/a&gt; 的工具。该工具来自于一个开源项目，它包含的大量的选项允许系统管理员从多个不同的IT系统中获取各种指标，并且运行保存这些数据供以后分析。我们使用它来生成，追踪，以及保存指标数据，例如网络吞吐量，CPU的磁盘IO等待时间，空闲的内存，以及CPU的空闲时间（指出过度/未充分使用计算机资源）。它也常被用于监控其他类型的系统资源，例如inode的使用以及打开的socket数量。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Collectl命令输出样例&lt;/em&gt;&lt;br&gt;&lt;img src=&quot;/images/elk-howto/collectl-command-example-1024x317.png&quot; alt=&quot;Collectl命令输出样例&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后，Collectl使用指定格式(in plot format)将采集的指标输出到一个日志文件中。该开源项目知道如何收集信息但是它并不会自动发送数据到ELK软件栈中。&lt;/p&gt;
&lt;h3 id=&quot;使用一个Docker容器&quot;&gt;&lt;a href=&quot;#使用一个Docker容器&quot; class=&quot;headerlink&quot; title=&quot;使用一个Docker容器&quot;&gt;&lt;/a&gt;使用一个Docker容器&lt;/h3&gt;&lt;p&gt;我们把Collectl封装到了一个Docker容器中来获取一个Docker镜像，该镜像会包含了数据采集和数据发送的基本软件。我们使用版本4.0.0的Collectl以及下面提到的配置，这样可以避免一系列的问题：&lt;/p&gt;
&lt;p&gt;—— 为了避免数据在容器中过载，我们只保存了当天的数据。更久的数据都是维护在ELK软件栈中，因此你无需担心在容器的日志中保存所有的数据导致的问题。&lt;/p&gt;
&lt;p&gt;—— Collectl可以以指定的时间周期收集各种采样数据，当它会用不同的时间周期把数据持久到磁盘。这被称为刷新周期。如果数据每秒钟都被刷新到磁盘那么你可以得到近乎实时的数据。不过例如对于一个30秒的采集间隔，那么选择一个十分激进的采样周期不是必须的。一个输出格式化器会用于输出指定格式(a plot format)的输出，默认它会在每一行输出多个值，每个值用空格分开。&lt;/p&gt;
&lt;p&gt;Collectl配置文件看上去类似下面：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DaemonCommands = -f /var/log/collectl/performance-tab -r00:00,0 -F1 -s+YZ -oz -P --interval 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PQuery =   /usr/sbin/perfquery:/usr/bin/perfquery:/usr/local/ofed/bin/perfquery&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PCounter = /usr/mellanox/bin/get_pcounter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VStat =    /usr/mellanox/bin/vstat:/usr/bin/vstat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OfedInfo = /usr/bin/ofed_info:/usr/local/ofed/bin/ofed_info&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Resize=/usr/bin/resize:/usr/X11R6/bin/resize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ipmitool =  /usr/bin/ipmitool:/usr/local/bin/ipmitool:/opt/hptc/sbin/ipmitool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IpmiCache = /var/run/collectl-ipmicache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IpmiTypes = fan,temp,current&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用RSYSLOG&quot;&gt;&lt;a href=&quot;#使用RSYSLOG&quot; class=&quot;headerlink&quot; title=&quot;使用RSYSLOG&quot;&gt;&lt;/a&gt;使用RSYSLOG&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.rsyslog.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RSYSLOG&lt;/a&gt;是另一个容器组件。它用来从日志文件中提取数据，并且发送数据到ELK软件栈中。为了让Logstash专注于需要字段而不是所有的数据上，这里建议使用RSYSLOG在日志里增加一些元数据来对日志进行筛选。这里可以在数据发送前对指标进行过滤或者增加一些信息比如实例名称以及IP地址。附加上了时间戳后，这些信息可以被发送到Logstash。&lt;/p&gt;
&lt;h3 id=&quot;一些注意点&quot;&gt;&lt;a href=&quot;#一些注意点&quot; class=&quot;headerlink&quot; title=&quot;一些注意点&quot;&gt;&lt;/a&gt;一些注意点&lt;/h3&gt;&lt;p&gt;在本步骤，有两个问题需要注意：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;1 - 时间戳：&lt;/em&gt; 首先，Collectl并不在采集的数据中输出它的时间戳。因此如果你不同的主机运行在不同的时区，它们在你的ELK里面并不会对齐。为了解决这个问题，我们需要查询容器当前运行的时区，然后设置相应的时间戳。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2 - 遵循Collectl日志文件名：&lt;/em&gt; 另一个复杂的问题是Collectl输出数据到一个文件中，但是该文件名不是固定不变的。仅仅文件名的前缀是可以自定义的，然后Collectl自动在文件名上加上了当前日期。这个问题导致RSYSLOG不能通过文件名来监视文件，当日期切换时文件名也会改变。我们可以用最新版本的RSYSLOG —— 版本8来解决它，但是这里我假设大多数用户还没有用上这个版本。我们创建了一个很小的脚本，它调用了老版本的RSYSLOG，该脚本在容器里运行了一个定时的任务，该任务会链接一个指定的名称的文件名到一个固定的日志文件名上。然后SYSLOG只中那个固定日志文件中提取数据，即便该文件链接的目标文件改变了也没有关系。这就像一个指针，它在一定的时间下总是指向正确的Collectl日志文件。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ModLoad&lt;/span&gt; imfile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$InputFilePollInterval&lt;/span&gt; 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$PrivDropToGroup&lt;/span&gt; adm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$WorkDirectory&lt;/span&gt; /var/spool/rsyslog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Logengine access file:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$InputFileName&lt;/span&gt; /var/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/collectl/daily.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$InputFileTag&lt;/span&gt; performance-tab:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$InputFileStateFile&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;stat&lt;/span&gt;-performance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$InputFileSeverity&lt;/span&gt; info&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$InputFilePersistStateInterval&lt;/span&gt; 20000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$InputRunFileMonitor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$template&lt;/span&gt; logzioPerformanceFormat,&lt;span class=&quot;string&quot;&gt;&quot;[XXLOGZTOKENXX] &amp;lt;%pri%&amp;gt;%protocol-version% %timestamp:::date-rfc3339% XXHOSTNAMEXX %app-name% %procid% %msgid% [type=performance-tab instance=XXINSTANCTIDXX] XXOFSETXX %msg% XXUSERTAGXX\n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$programname&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&#39;performance-tab&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; @@XXLISTENERXX;logzioPerformanceFormat&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;容器检查清单&quot;&gt;&lt;a href=&quot;#容器检查清单&quot; class=&quot;headerlink&quot; title=&quot;容器检查清单&quot;&gt;&lt;/a&gt;容器检查清单&lt;/h3&gt;&lt;p&gt;— Collectl&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RSYSLOG&lt;/li&gt;
&lt;li&gt;链接Collectl输出文件的脚本&lt;/li&gt;
&lt;li&gt;脚本文件的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面用到的Docker镜像可以在DockerHub上拉取，链接： &lt;a href=&quot;https://registry.hub.docker.com/u/logzio/logzio-perfagent/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://registry.hub.docker.com/u/logzio/logzio-perfagent/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-解析数据&quot;&gt;&lt;a href=&quot;#2-解析数据&quot; class=&quot;headerlink&quot; title=&quot;2. 解析数据&quot;&gt;&lt;/a&gt;2. 解析数据&lt;/h2&gt;&lt;p&gt;在收集和装箱发送后，我们需要做数据的解析。Collectl返回的是未结构化的日志数据，它基本是由一系列的数字组成， Logstash Grok表达式使用这些数据来获取每个字段的名称和指定的值。&lt;/p&gt;
&lt;p&gt;Collectl的配置参数显示设置了一个特定的输出模式。RSYSLOG日志配置在发送的消息中的特定位置增加了时区的信息。如果你想同时使用了这两个配置，那Grok模式配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;GREEDYDATA:zone_time&amp;#125; %&amp;#123;NUMBER:cpu__user_percent:int&amp;#125; %&amp;#123;NUMBER:cpu__nice_percent:int&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:cpu__sys_percent:int&amp;#125; %&amp;#123;NUMBER:cpu__wait_percent:int&amp;#125; %&amp;#123;NUMBER:cpu__irq_percent:int&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:cpu__soft_percent:int&amp;#125; %&amp;#123;NUMBER:cpu__steal_percent:int&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:cpu__idle_percent:int&amp;#125; %&amp;#123;NUMBER:cpu__totl_percent:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:cpu__guest_percent:int&amp;#125; %&amp;#123;NUMBER:cpu__guestN_percent:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:cpu__intrpt_sec:int&amp;#125; %&amp;#123;NUMBER:cpu__ctx_sec:int&amp;#125; %&amp;#123;NUMBER:cpu__proc_sec:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:cpu__proc__queue:int&amp;#125; %&amp;#123;NUMBER:cpu__proc__run:int&amp;#125; %&amp;#123;NUMBER:cpu__load__avg1:float&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:cpu__load__avg5:float&amp;#125; %&amp;#123;NUMBER:cpu__load__avg15:float&amp;#125; %&amp;#123;NUMBER:cpu__run_tot:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:cpu__blk_tot:int&amp;#125; %&amp;#123;NUMBER:mem__tot:int&amp;#125; %&amp;#123;NUMBER:mem__used:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:mem__free:int&amp;#125; %&amp;#123;NUMBER:mem__shared:int&amp;#125; %&amp;#123;NUMBER:mem__buf:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:mem__cached:int&amp;#125; %&amp;#123;NUMBER:mem__slab:int&amp;#125; %&amp;#123;NUMBER:mem__map:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:mem__anon:int&amp;#125; %&amp;#123;NUMBER:mem__commit:int&amp;#125; %&amp;#123;NUMBER:mem__locked:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:mem__swap__tot:int&amp;#125; %&amp;#123;NUMBER:mem__swap__used:int&amp;#125; %&amp;#123;NUMBER:mem__swap__free:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:mem__swap__in:int&amp;#125; %&amp;#123;NUMBER:mem__swap__out:int&amp;#125; %&amp;#123;NUMBER:mem__dirty:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:mem__clean:int&amp;#125; %&amp;#123;NUMBER:mem__laundry:int&amp;#125; %&amp;#123;NUMBER:mem__inactive:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:mem__page__in:int&amp;#125; %&amp;#123;NUMBER:mem__page__out:int&amp;#125; %&amp;#123;NUMBER:mem__page__faults:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:mem__page__maj_faults:int&amp;#125; %&amp;#123;NUMBER:mem__huge__total:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:mem__huge__free:int&amp;#125; %&amp;#123;NUMBER:mem__huge__reserved:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:mem__s_unreclaim:int&amp;#125; %&amp;#123;NUMBER:sock__used:int&amp;#125; %&amp;#123;NUMBER:sock__tcp:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:sock__orph:int&amp;#125; %&amp;#123;NUMBER:sock__tw:int&amp;#125; %&amp;#123;NUMBER:sock__alloc:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:sock__mem:int&amp;#125; %&amp;#123;NUMBER:sock__udp:int&amp;#125; %&amp;#123;NUMBER:sock__raw:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:sock__frag:int&amp;#125; %&amp;#123;NUMBER:sock__frag_mem:int&amp;#125; %&amp;#123;NUMBER:net__rx_pkt_tot:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:net__tx_pkt_tot:int&amp;#125; %&amp;#123;NUMBER:net__rx_kb_tot:int&amp;#125; %&amp;#123;NUMBER:net__tx_kb_tot:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:net__rx_cmp_tot:int&amp;#125; %&amp;#123;NUMBER:net__rx_mlt_tot:int&amp;#125; %&amp;#123;NUMBER:net__tx_cmp_tot:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:net__rx_errs_tot:int&amp;#125; %&amp;#123;NUMBER:net__tx_errs_tot:int&amp;#125; %&amp;#123;NUMBER:dsk__read__tot:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:dsk__write__tot:int&amp;#125; %&amp;#123;NUMBER:dsk__ops__tot:int&amp;#125; %&amp;#123;NUMBER:dsk__read__kb_tot:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:dsk__write__kb_tot:int&amp;#125; %&amp;#123;NUMBER:dsk__kb__tot:int&amp;#125; %&amp;#123;NUMBER:dsk__read__mrg_tot:int&amp;#125; %&amp;#123;NUMBER:dsk__write__mrg_tot:int&amp;#125; %&amp;#123;NUMBER:dsk__mrg__tot:int&amp;#125; %&amp;#123;NUMBER:inode__numDentry:int&amp;#125; %&amp;#123;NUMBER:inode__openfiles:int&amp;#125; %&amp;#123;NUMBER:inode__max_file_percent:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:inode__used:int&amp;#125; %&amp;#123;NUMBER:nfs__reads_s:int&amp;#125; %&amp;#123;NUMBER:nfs__writes_s:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:nfs__meta_s:int&amp;#125; %&amp;#123;NUMBER:nfs__commit_s:int&amp;#125; %&amp;#123;NUMBER:nfs__udp:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:nfs__tcp:int&amp;#125; %&amp;#123;NUMBER:nfs__tcp_conn:int&amp;#125; %&amp;#123;NUMBER:nfs__bad_auth:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:nfs__bad_client:int&amp;#125; %&amp;#123;NUMBER:nfs__reads_c:int&amp;#125; %&amp;#123;NUMBER:nfs__writes_c:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:nfs__meta_c:int&amp;#125; %&amp;#123;NUMBER:nfs__commit_c:int&amp;#125; %&amp;#123;NUMBER:nfs__retrans:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:nfs__authref:int&amp;#125; %&amp;#123;NUMBER:tcp__ip_err:int&amp;#125; %&amp;#123;NUMBER:tcp__tcp_err:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:tcp__udp_err:int&amp;#125; %&amp;#123;NUMBER:tcp__icmp_err:int&amp;#125; %&amp;#123;NUMBER:tcp__loss:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:tcp__f_trans:int&amp;#125; %&amp;#123;NUMBER:buddy__page_1:int&amp;#125; %&amp;#123;NUMBER:buddy__page_2:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:buddy__page_4:int&amp;#125; %&amp;#123;NUMBER:buddy__page_8:int&amp;#125; %&amp;#123;NUMBER:buddy__page_16:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:buddy__page_32:int&amp;#125; %&amp;#123;NUMBER:buddy__page_64:int&amp;#125; %&amp;#123;NUMBER:buddy__page_128:int&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;NUMBER:buddy__page_256:int&amp;#125; %&amp;#123;NUMBER:buddy__page_512:int&amp;#125; %&amp;#123;NUMBER:buddy__page_1024:int&amp;#125;?( &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;#123;GREEDYDATA:user_tag&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-可视化&quot;&gt;&lt;a href=&quot;#3-可视化&quot; class=&quot;headerlink&quot; title=&quot;3. 可视化&quot;&gt;&lt;/a&gt;3. 可视化&lt;/h2&gt;&lt;p&gt;如果你运行了一个快速的ELK软件栈，那你会几乎同时得到这些数据的展示。显然这依赖于你安装的ELK的性能，不过你可以预期会在半分钟之内得到结果 - 一个最新的数据流的信息。&lt;/p&gt;
&lt;p&gt;在Logz.io，我们有一些预定义的报警和仪表板来展示性能指标，它们都是使用Collectl。如果你也使用Logz.io服务，请在聊天室里找到我们，我们将会分享这些有用的信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/elk-howto/kibana-example-1024x849.png&quot; alt=&quot;kibana example&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你想了解更多，请随意在下面留言！&lt;/p&gt;
&lt;p&gt;翻译自&lt;a href=&quot;http://logz.io/blog/elk-monitor-platform-performance/?utm_source=devops.com&amp;amp;utm_medium=referral&amp;amp;utm_content=9_open_source_devops_tools&amp;amp;utm_campaign=contributed_article&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/elk-howto/Screen-Shot-2015-06-29-at-3.36.19-PM-1024x451.png&quot; alt=&quot;EKL GUI&quot;&gt;&lt;/p&gt;
&lt;p&gt;每当我解决一些应用性能问题的时候，我常常会看到一个服务由于高的CPU利用率而使得一台或者多台服务器运行变得非常缓慢。这也许意味着它因为高负载而导致资源缺乏，但是通常情况下这其实是代码有bug，一个异常或者一个错误的流程导致过多占用了系统资源。为了把这些问题找出来，我不得不在NewRelic/Nagios和ELK之间查看信息。&lt;/p&gt;
&lt;p&gt;所以我确信我需要有一个单一的管理面板来查看从各个应用，操作系统以及网络设备上收集来的事件组合而成的性能指标&lt;/p&gt;
&lt;p&gt;为了使用ELK来监控你平台的性能，你需要集成一系列的工具。Probes是必须包含的组件，它运行在各个主机上用来收集各种系统性能指标。然后，采集的数据需要发送给Logstash，然后在Elasticsearch中进行聚集，最后由Kibana转换成图形。最终，软件服务操作组成员使用这些图形展示系统性能。在这篇文章中，我将分享我们如何建构我们的ELK软件栈来监控服务的性能。&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://yoursite.com/categories/Development/"/>
    
    
      <category term="Elasticsearch" scheme="http://yoursite.com/tags/Elasticsearch/"/>
    
      <category term="Logstash" scheme="http://yoursite.com/tags/Logstash/"/>
    
      <category term="Kibana" scheme="http://yoursite.com/tags/Kibana/"/>
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="Collectl" scheme="http://yoursite.com/tags/Collectl/"/>
    
  </entry>
  
  <entry>
    <title>Consul入门06 － 键／值对数据</title>
    <link href="http://yoursite.com/2016/05/01/Consul-Getting-Started-06-KeyValue-Data/"/>
    <id>http://yoursite.com/2016/05/01/Consul-Getting-Started-06-KeyValue-Data/</id>
    <published>2016-05-01T05:15:00.000Z</published>
    <updated>2016-05-01T06:10:32.000Z</updated>
    
    <content type="html">&lt;p&gt;为了提供服务发现以及健康检测，Consul提供了非常容易使用的键／值对存储。它能被用于存储动态配置信息，帮助服务协作，建构leader选举机制，以及开发者可以想到的建构任何其它的东西。&lt;/p&gt;
&lt;p&gt;本篇假设你至少有一个Consul代理在运行。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;简单使用&quot;&gt;&lt;a href=&quot;#简单使用&quot; class=&quot;headerlink&quot; title=&quot;简单使用&quot;&gt;&lt;/a&gt;简单使用&lt;/h2&gt;&lt;p&gt;为了展示存储键／值对是非常简单的，我们将在键／值存储里维护一些键。&lt;/p&gt;
&lt;p&gt;我们在&lt;a href=&quot;https://www.consul.io/intro/getting-started/agent.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;运行代理&lt;/a&gt;步骤中展示了查询本地代理，我们先验证键／值存储中没有任何键存在：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl -v http://localhost:8500/v1/kv/?recurse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* About to connect() to localhost port 8500 (&lt;span class=&quot;comment&quot;&gt;#0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*   Trying 127.0.0.1... connected&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; GET /v1/kv/?recurse HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; User-Agent: curl/7.22.0 (x86_64-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; Host: localhost:8500&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; Accept: */*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; HTTP/1.1 404 Not Found&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; X-Consul-Index: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; Date: Fri, 11 Apr 2014 02:10:28 GMT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; Content-Length: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; Content-Type: text/plain; charset=utf-8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Connection &lt;span class=&quot;comment&quot;&gt;#0 to host localhost left intact&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Closing connection &lt;span class=&quot;comment&quot;&gt;#0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为没有任何键，所以我们得到了404的响应，我们可以用 &lt;em&gt;PUT&lt;/em&gt; 来存储一些键：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl -X PUT &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt; http://localhost:8500/v1/kv/web/key1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl -X PUT &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt; http://localhost:8500/v1/kv/web/key2?flags=42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl -X PUT &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;  http://localhost:8500/v1/kv/web/sub/key3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl http://localhost:8500/v1/kv/?recurse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;CreateIndex&quot;&lt;/span&gt;:97,&lt;span class=&quot;string&quot;&gt;&quot;ModifyIndex&quot;&lt;/span&gt;:97,&lt;span class=&quot;string&quot;&gt;&quot;Key&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;web/key1&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Flags&quot;&lt;/span&gt;:0,&lt;span class=&quot;string&quot;&gt;&quot;Value&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;dGVzdA==&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;CreateIndex&quot;&lt;/span&gt;:98,&lt;span class=&quot;string&quot;&gt;&quot;ModifyIndex&quot;&lt;/span&gt;:98,&lt;span class=&quot;string&quot;&gt;&quot;Key&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;web/key2&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Flags&quot;&lt;/span&gt;:42,&lt;span class=&quot;string&quot;&gt;&quot;Value&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;dGVzdA==&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;CreateIndex&quot;&lt;/span&gt;:99,&lt;span class=&quot;string&quot;&gt;&quot;ModifyIndex&quot;&lt;/span&gt;:99,&lt;span class=&quot;string&quot;&gt;&quot;Key&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;web/sub/key3&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Flags&quot;&lt;/span&gt;:0,&lt;span class=&quot;string&quot;&gt;&quot;Value&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;dGVzdA==&quot;&lt;/span&gt;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里我们创建了3个键，每个都关联了值”test”。注意 &lt;em&gt;值&lt;/em&gt; 字段的返回是基于base64的编码，该编码允许非UTF8字符集。对于键”web/key2”，我们为其设置了一个42的 &lt;em&gt;标记&lt;/em&gt;。所有的键都支持设置一个64位长的整形标记值。这个标记并不是由Consul内部使用的，它可以被用于存储任意键值对的元数据信息。&lt;/p&gt;
&lt;p&gt;在设置值之后，我们使用 &lt;em&gt;?recurse&lt;/em&gt; 参数发出了 &lt;em&gt;GET&lt;/em&gt; 请求来接收多个键的信息。&lt;/p&gt;
&lt;p&gt;你也可以非常容易地获取单个键的信息：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl http://localhost:8500/v1/kv/web/key1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;CreateIndex&quot;&lt;/span&gt;:97,&lt;span class=&quot;string&quot;&gt;&quot;ModifyIndex&quot;&lt;/span&gt;:97,&lt;span class=&quot;string&quot;&gt;&quot;Key&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;web/key1&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Flags&quot;&lt;/span&gt;:0,&lt;span class=&quot;string&quot;&gt;&quot;Value&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;dGVzdA==&quot;&lt;/span&gt;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;删除一个键也同样非常简单，使用 &lt;em&gt;DELETE&lt;/em&gt; 来删除一个键。我们可以指定完整路径来删除单独一个键，或者使用”?recurse”递归删除所有的键：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl -X DELETE http://localhost:8500/v1/kv/web/sub?recurse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl http://localhost:8500/v1/kv/web?recurse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;CreateIndex&quot;&lt;/span&gt;:97,&lt;span class=&quot;string&quot;&gt;&quot;ModifyIndex&quot;&lt;/span&gt;:97,&lt;span class=&quot;string&quot;&gt;&quot;Key&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;web/key1&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Flags&quot;&lt;/span&gt;:0,&lt;span class=&quot;string&quot;&gt;&quot;Value&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;dGVzdA==&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;CreateIndex&quot;&lt;/span&gt;:98,&lt;span class=&quot;string&quot;&gt;&quot;ModifyIndex&quot;&lt;/span&gt;:98,&lt;span class=&quot;string&quot;&gt;&quot;Key&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;web/key2&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Flags&quot;&lt;/span&gt;:42,&lt;span class=&quot;string&quot;&gt;&quot;Value&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;dGVzdA==&quot;&lt;/span&gt;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用一个 &lt;em&gt;PUT&lt;/em&gt; 请求相同的URI并且提供一个不同的消息体就可以修改指定的键，Consul提供了一个 &lt;em&gt;检测并设置&lt;/em&gt; 的操作，对应的操作是原子的。通过在GET请求中提供 &lt;em&gt;?cas=&lt;/em&gt; 参数以及指定最新的 &lt;em&gt;ModifyIndex&lt;/em&gt; 值我们就可以得到原子CAS操作。例如，假设我们想要更新”web/key1”：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl -X PUT &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;newval&#39;&lt;/span&gt; http://localhost:8500/v1/kv/web/key1?cas=97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl -X PUT &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;newval&#39;&lt;/span&gt; http://localhost:8500/v1/kv/web/key1?cas=97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里，第一个CAS更新成功了因为最新的 &lt;em&gt;ModifyIndex&lt;/em&gt; 是97，而第二个操作失败了因为最新的 &lt;em&gt;ModifyIndex&lt;/em&gt; 不再是97了。&lt;/p&gt;
&lt;p&gt;我们可以使用 &lt;em&gt;ModifyIndex&lt;/em&gt; 来等待指定键值的改变，例如，假设我们想要等待Key2的修改：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl &lt;span class=&quot;string&quot;&gt;&quot;http://localhost:8500/v1/kv/web/key2?index=101&amp;amp;wait=5s&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;CreateIndex&quot;&lt;/span&gt;:98,&lt;span class=&quot;string&quot;&gt;&quot;ModifyIndex&quot;&lt;/span&gt;:101,&lt;span class=&quot;string&quot;&gt;&quot;Key&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;web/key2&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Flags&quot;&lt;/span&gt;:42,&lt;span class=&quot;string&quot;&gt;&quot;Value&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;dGVzdA==&quot;&lt;/span&gt;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过提供”?index=”参数，我们请求等待直到键包含了一个大于101的 &lt;em&gt;ModifyIndex&lt;/em&gt; 的值。无论如何由于”?wait=5”参数限制了查询最多等待5秒，之后会返回当前没有修改的值。该操作可以高效地等待键的更新。另外相同的方法可以用于等待一个键的集合，直到键集合中任何一个键发生的更新。&lt;/p&gt;
&lt;h2 id=&quot;下一步&quot;&gt;&lt;a href=&quot;#下一步&quot; class=&quot;headerlink&quot; title=&quot;下一步&quot;&gt;&lt;/a&gt;下一步&lt;/h2&gt;&lt;p&gt;这里的例子仅仅展示了部分的API使用。如果需要完整的文档，请查询&lt;a href=&quot;https://www.consul.io/docs/agent/http/kv.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;the /kv/ route of the HTTP API&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下一步，我们将看看Consul支持的&lt;a href=&quot;&quot;&gt;web界面&lt;/a&gt;中的选项&lt;/p&gt;
&lt;p&gt;翻译自&lt;a href=&quot;https://www.consul.io/intro/getting-started/kv.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;为了提供服务发现以及健康检测，Consul提供了非常容易使用的键／值对存储。它能被用于存储动态配置信息，帮助服务协作，建构leader选举机制，以及开发者可以想到的建构任何其它的东西。&lt;/p&gt;
&lt;p&gt;本篇假设你至少有一个Consul代理在运行。&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://yoursite.com/categories/Development/"/>
    
    
      <category term="Consul" scheme="http://yoursite.com/tags/Consul/"/>
    
      <category term="MicroService" scheme="http://yoursite.com/tags/MicroService/"/>
    
  </entry>
  
  <entry>
    <title>Consul入门05 － 健康检测</title>
    <link href="http://yoursite.com/2016/05/01/Consul-Getting-Started-05-Health-Checks/"/>
    <id>http://yoursite.com/2016/05/01/Consul-Getting-Started-05-Health-Checks/</id>
    <published>2016-05-01T03:45:00.000Z</published>
    <updated>2016-05-01T06:10:25.000Z</updated>
    
    <content type="html">&lt;p&gt;我们已经看到了运行Consul，增加节点和服务，以及查询这些贱点和服务是多么地简单。在这篇教程中，我们将继续增加对节点和服务健康监测的教程。健康监测对服务发现是一个关键的组件，它避免使用不健康的服务。&lt;/p&gt;
&lt;p&gt;本篇的步骤基于前一篇 &lt;em&gt;Consul集群&lt;/em&gt;，这里你应该运行有两个节点的集群。&lt;/p&gt;
&lt;h2 id=&quot;定义检测&quot;&gt;&lt;a href=&quot;#定义检测&quot; class=&quot;headerlink&quot; title=&quot;定义检测&quot;&gt;&lt;/a&gt;定义检测&lt;/h2&gt;&lt;p&gt;类似于服务，可以通过一个 &lt;a href=&quot;https://www.consul.io/docs/agent/checks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;检测定义&lt;/a&gt;或者通过调用HTTP API来注册一个检测。&lt;/p&gt;
&lt;p&gt;我们将使用检测定义的方法，因为就像服务一样，使用定义是一个最为常用的方法来设置检测。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在第二个节点的Consul配置目录中创建两个定义文件：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vagrant@n2:~$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&quot;check&quot;: &amp;#123;&quot;name&quot;: &quot;ping&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;script&quot;: &quot;ping -c1 google.com &amp;gt;/dev/null&quot;, &quot;interval&quot;: &quot;30s&quot;&amp;#125;&amp;#125;&#39;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;gt;/etc/consul.d/ping.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant@n2:~$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&quot;service&quot;: &amp;#123;&quot;name&quot;: &quot;web&quot;, &quot;tags&quot;: [&quot;rails&quot;], &quot;port&quot;: 80,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;check&quot;: &amp;#123;&quot;script&quot;: &quot;curl localhost &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&quot;, &quot;interval&quot;: &quot;10s&quot;&amp;#125;&amp;#125;&amp;#125;&#39;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;gt;/etc/consul.d/web.json&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个定义增加了一个主机级别的检测，名为”ping”。该检测每30秒间隔运行一次，调用命令 &lt;em&gt;ping -c1 google.com&lt;/em&gt;。在一个基于脚本的健康检测中，该检测使用启动Consul进程的用户来启动该检测。如果检测命令返回一个非0的返回码，那么该节点将被标记为不健康。这就是任何基于 &lt;em&gt;脚本&lt;/em&gt; 的健康检测的契约。&lt;/p&gt;
&lt;p&gt;第二个命令修改名为 &lt;em&gt;web&lt;/em&gt; 的服务，增加了一个检测，该检测每10秒用curl发送一个请求来验证该web服务是否可用。就像基于主机的健康检测，如果脚本返回一个非0的返回码，那该服务将被标记为不健康。&lt;/p&gt;
&lt;p&gt;现在重启第二个代理或者向它发送一个 &lt;em&gt;SIGHUP&lt;/em&gt; 信号。你会看到下列日志信息：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;==&amp;gt; Starting Consul agent...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [INFO] agent: Synced service &lt;span class=&quot;string&quot;&gt;&#39;web&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [INFO] agent: Synced check &lt;span class=&quot;string&quot;&gt;&#39;service:web&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [INFO] agent: Synced check &lt;span class=&quot;string&quot;&gt;&#39;ping&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [WARN] Check &lt;span class=&quot;string&quot;&gt;&#39;service:web&#39;&lt;/span&gt; is now critical&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;前面的几行指出该代理已经同步了新的定义。后面的几行指出了被检测的 &lt;em&gt;web&lt;/em&gt; 服务被标记为危险。这是因为我们还没有实际运行一个web服务器，所以这个curl测试标记为失败了。&lt;/p&gt;
&lt;h2 id=&quot;检测健康状态&quot;&gt;&lt;a href=&quot;#检测健康状态&quot; class=&quot;headerlink&quot; title=&quot;检测健康状态&quot;&gt;&lt;/a&gt;检测健康状态&lt;/h2&gt;&lt;p&gt;现在我们已经增加了一些检测，我们可以使用HTTP API来审查它们。首先，我们可以使用命令寻找任何失败的检测（注意，这个命了可以在任何节点上运行）：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vagrant@n1:~$ curl http://localhost:8500/v1/health/state/critical&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Node&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;agent-two&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;CheckID&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;service:web&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Name&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Service &#39;web&#39; check&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Status&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;critical&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Notes&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;ServiceID&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;web&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;ServiceName&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;web&quot;&lt;/span&gt;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到现在只有一个检测，那是我们的 &lt;em&gt;web&lt;/em&gt; 服务的检测，它被设置为危险状态。&lt;/p&gt;
&lt;p&gt;另外，我们可以尝试使用DNS查询web服务。Consul不会返回任何结果因为该服务是不健康的：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dig @127.0.0.1 -p 8600 web.service.consul&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; QUESTION SECTION:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;web.service.consul.        IN  A&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;下一步&quot;&gt;&lt;a href=&quot;#下一步&quot; class=&quot;headerlink&quot; title=&quot;下一步&quot;&gt;&lt;/a&gt;下一步&lt;/h2&gt;&lt;p&gt;在本篇教程中，你学会了增加健康检测是非常容易。通过更新配置文件并且发送一个 &lt;em&gt;SIGHUP&lt;/em&gt; 信号给代理来更新检测定义。还可以选择使用HTTP API来动态地增加，删除，以及修改检测。该API也可以用于一个”dead man’s switch”，一个&lt;a href=&quot;https://www.consul.io/docs/agent/checks.html#TTL&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TTL-based check&lt;/a&gt;。TTL检测可以被用于一个应用程序和Consul是紧密集成的，使得业务逻辑评估是基于健康检测的一部分。&lt;/p&gt;
&lt;p&gt;接下来，我们将浏览&lt;a href=&quot;&quot;&gt;Consul的键／值存储&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;翻译自&lt;a href=&quot;https://www.consul.io/intro/getting-started/checks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我们已经看到了运行Consul，增加节点和服务，以及查询这些贱点和服务是多么地简单。在这篇教程中，我们将继续增加对节点和服务健康监测的教程。健康监测对服务发现是一个关键的组件，它避免使用不健康的服务。&lt;/p&gt;
&lt;p&gt;本篇的步骤基于前一篇 &lt;em&gt;Consul集群&lt;/em&gt;，这里你应该运行有两个节点的集群。&lt;/p&gt;
&lt;h2 id=&quot;定义检测&quot;&gt;&lt;a href=&quot;#定义检测&quot; class=&quot;headerlink&quot; title=&quot;定义检测&quot;&gt;&lt;/a&gt;定义检测&lt;/h2&gt;&lt;p&gt;类似于服务，可以通过一个 &lt;a href=&quot;https://www.consul.io/docs/agent/checks.html&quot;&gt;检测定义&lt;/a&gt;或者通过调用HTTP API来注册一个检测。&lt;/p&gt;
&lt;p&gt;我们将使用检测定义的方法，因为就像服务一样，使用定义是一个最为常用的方法来设置检测。&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://yoursite.com/categories/Development/"/>
    
    
      <category term="Consul" scheme="http://yoursite.com/tags/Consul/"/>
    
      <category term="MicroService" scheme="http://yoursite.com/tags/MicroService/"/>
    
  </entry>
  
  <entry>
    <title>Consul入门04 － Consul集群</title>
    <link href="http://yoursite.com/2016/05/01/Consul-Getting-Started-04-Consul-Cluster/"/>
    <id>http://yoursite.com/2016/05/01/Consul-Getting-Started-04-Consul-Cluster/</id>
    <published>2016-05-01T01:29:00.000Z</published>
    <updated>2016-05-01T06:10:20.000Z</updated>
    
    <content type="html">&lt;p&gt;我们已经启动了我们的第一个代理并且在这个代理上注册和查询了服务。这些显示了使用Consul是多么的容易但是并没有展示Consul的可扩展性以及可用于产品级别的服务发现的基础设施。在本篇向导中，我们将建立我们第一个多成员的真实的集群。&lt;/p&gt;
&lt;p&gt;当一个Consul代理启动后，它对任何其他的节点都一无所知：它是个单独的隔离集群。为了让它感知其他的集群成员，代理必须加入一个现有的集群中去。为了加入一个现有的集群，它只需要知道一个单个的现有成员。它加入后，代理将广播该成员，并且快速发现集群中的其它成员。一个Consul代理能够加入任何其它的代理，不仅仅是那些运行在服务模式下的代理。&lt;/p&gt;
&lt;h2 id=&quot;启动代理&quot;&gt;&lt;a href=&quot;#启动代理&quot; class=&quot;headerlink&quot; title=&quot;启动代理&quot;&gt;&lt;/a&gt;启动代理&lt;/h2&gt;&lt;p&gt;为了模拟一个相对真实的集群，我们将通过&lt;a href=&quot;https://www.vagrantup.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vagrant&lt;/a&gt;启动两个节点的集群。接下来使用的Vagrantfile可以在&lt;a href=&quot;https://github.com/hashicorp/consul/tree/master/demo/vagrant-cluster&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Consul仓库demo&lt;/a&gt;中找到。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;我们首先启动两个节点：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ vagrant up&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一旦该系统可用了，我们就能通过ssh登录到该系统，并开始配置我们的集群。我们开始登录到第一个节点：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ vagrant ssh n1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在我们以前的例子里，我们使用 ＊-dev&lt;em&gt; 标志来快速地设置一个开发服务器。无论如何它并不能用于一个集群的环境下。我们将移除 &lt;/em&gt;-dev* 标志，而是替换成指定的用于集群的标志，下面就回涉及该标志。&lt;/p&gt;
&lt;p&gt;每个集群节点都必须有一个唯一的名称。默认下Consul使用计算机的主机名，不过我们可以使用 &lt;em&gt;-node&lt;/em&gt; &lt;a href=&quot;https://www.consul.io/docs/agent/options.html#_node&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;命令行选项&lt;/a&gt;手动地覆盖它。&lt;/p&gt;
&lt;p&gt;我们也可以指定 &lt;a href=&quot;https://www.consul.io/docs/agent/options.html#_bind&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;绑定地址&lt;/a&gt;：Consul将在该地址侦听，并且改地址可以被集群中所有其它的节点访问到。虽然一个 &lt;em&gt;绑定&lt;/em&gt; 的地址不是一个严格需要的（Consul将默认侦听在系统中第一个私有的IP），不过最好提供一个。一个生产环境下的服务通常有多个网络接口，所以指定一个 &lt;em&gt;绑定&lt;/em&gt; 地址将保证你不会把Consul绑定到错误的网络接口上。&lt;/p&gt;
&lt;p&gt;第一个节点现在将作为我们集群中的唯一服务器，我们指定它运行在server模式下。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;-bootstrap-expect&lt;/em&gt; 标志暗示Consul服务器我们会有其它的服务节点将会加入。这个标志的目的是延迟复制日志的引导直到预期的服务节点成功加入。你可以在&lt;a href=&quot;https://www.consul.io/docs/guides/bootstrapping.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;引导教程&lt;/a&gt;里查阅到更多的信息。&lt;/p&gt;
&lt;p&gt;最后，我们增加 &lt;em&gt;config-dir&lt;/em&gt;，指定将在哪里可以找到服务以及检查定义。&lt;/p&gt;
&lt;p&gt;所有的标志都指定后，将这些设置加入 &lt;em&gt;consul ageng&lt;/em&gt; 命令行：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vagrant@n1:~$ consul agent -server -bootstrap-expect 1 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -data-dir /tmp/consul -node=agent-one -bind=172.20.20.10 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -config-dir /etc/consul.d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在，在另一终端里，我们连接到第二个节点：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ vagrant ssh n2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这次，我们设置 &lt;em&gt;绑定地址&lt;/em&gt; 是第二个节点的IP地址。因为该节点将不会是一个Consul的服务器，所以我们不指定它启动为服务器模式。&lt;/p&gt;
&lt;p&gt;所有的标志都指定后，将这些设置加入 &lt;em&gt;consul ageng&lt;/em&gt; 命令行：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vagrant@n2:~$ consul agent -data-dir /tmp/consul -node=agent-two \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -bind=172.20.20.11 -config-dir /etc/consul.d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这时，我们已经有了两个Consul代理在运行：一个服务器和一个客户端。这两个Consul代理现在还对彼此没有任何感知，它们都为两个单节点的集群。你可以运行 &lt;em&gt;consul members&lt;/em&gt; 来验证它们，每个集群都仅包含一个成员。&lt;/p&gt;
&lt;h2 id=&quot;加入集群&quot;&gt;&lt;a href=&quot;#加入集群&quot; class=&quot;headerlink&quot; title=&quot;加入集群&quot;&gt;&lt;/a&gt;加入集群&lt;/h2&gt;&lt;p&gt;现在，我们将告知第一个代理加入第二个代理，在一个新的终端中运行下列命令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ vagrant ssh n1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant@n1:~$ consul join 172.20.20.11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Successfully joined cluster by contacting 1 nodes.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你应该可以在各自的代理日志中看到一些日志的输出。如果你仔细的查看，你将会看到有节点加入的日志信息。如果你再次运行 &lt;em&gt;consul members&lt;/em&gt;，你会看到两个代理都已经感知到了另一个节点的存在。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vagrant@n2:~$ consul members&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Node       Address            Status  Type    Build  Protocol&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;agent-two  172.20.20.11:8301  alive   client  0.5.0  2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;agent-one  172.20.20.10:8301  alive   server  0.5.0  2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;记住：为了加入一个集群，一个Consul代理只需要知道一个现有的成员。在加入指定的集群后，各个代理会互相传播完整的成员信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;启动时自动加入一个集群&quot;&gt;&lt;a href=&quot;#启动时自动加入一个集群&quot; class=&quot;headerlink&quot; title=&quot;启动时自动加入一个集群&quot;&gt;&lt;/a&gt;启动时自动加入一个集群&lt;/h2&gt;&lt;p&gt;理想情况下，无论什么时候一个新的节点加入了你的数据中心中，它应该自动地加入Consul集群而无需手动操作。为了达到这个目的，你可以使用&lt;a href=&quot;https://atlas.hashicorp.com/?utm_source=oss&amp;amp;utm_medium=getting-started-join&amp;amp;utm_campaign=consul&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Atlas by HashiCorp&lt;/a&gt;并且指定 &lt;em&gt;-atlas-join&lt;/em&gt; 标志。下面就是一个配置例子：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ consul agent -atlas-join \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -atlas=ATLAS_USERNAME/infrastructure \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -atlas-token=&lt;span class=&quot;string&quot;&gt;&quot;YOUR_ATLAS_TOKEN&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这需要一个Atlas的用户名和token，在这里&lt;a href=&quot;https://atlas.hashicorp.com/account/new?utm_source=oss&amp;amp;utm_medium=getting-started-join&amp;amp;utm_campaign=consul&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;创建帐号&lt;/a&gt;，然后在你的Consul配置中使用你认证信息的替换各自的值。现在，无论何时一个通过Consul代理启动的节点加入，它将自动加入你的Consul集群而无需硬编码任何的配置信息。&lt;/p&gt;
&lt;p&gt;另一个可以选择的是，你可以在启动的时候使用 &lt;em&gt;-join&lt;/em&gt; 标志或者 &lt;em&gt;start_join&lt;/em&gt; 指定一个已知Consul代理的地址来加入一个集群。&lt;/p&gt;
&lt;h2 id=&quot;查询节点&quot;&gt;&lt;a href=&quot;#查询节点&quot; class=&quot;headerlink&quot; title=&quot;查询节点&quot;&gt;&lt;/a&gt;查询节点&lt;/h2&gt;&lt;p&gt;就像查询服务一样，Consul有一个API用户查询节点信息。你可以通过DNS或者HTTP API来查询。&lt;/p&gt;
&lt;p&gt;对于DNS API，名称结构是 &lt;em&gt;NAME.node.consul&lt;/em&gt; 或者 &lt;em&gt;NAME.node.DATACENTER.consul&lt;/em&gt;。 如果数据中心被移除，Consul将仅仅查询本地数据中心。&lt;/p&gt;
&lt;p&gt;例如，从“agent-one”，我们可以查询节点”agent-two”的地址：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vagrant@n1:~$ dig @127.0.0.1 -p 8600 agent-two.node.consul&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; QUESTION SECTION:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;agent-two.node.consul. IN  A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; ANSWER SECTION:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;agent-two.node.consul.  0 IN    A   172.20.20.11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种查找节点的能力对于系统管理任务而言是非常有用的。例如知道了节点的地址，我们可以使用ssh登录到该节点并且可以非常容易地使得该节点成为Consul集群中的一部分并且查询它。&lt;/p&gt;
&lt;h2 id=&quot;离开集群&quot;&gt;&lt;a href=&quot;#离开集群&quot; class=&quot;headerlink&quot; title=&quot;离开集群&quot;&gt;&lt;/a&gt;离开集群&lt;/h2&gt;&lt;p&gt;为了离开指定的集群，你可以优雅地退出一个代理（使用 &lt;em&gt;Ctrl-C&lt;/em&gt;）或者强制杀死代理进程。优雅地离开可以使得节点转换成离开状态；其它情况下，其它的节点检测这个节点将失败。其不同的地方在&lt;a href=&quot;https://www.consul.io/intro/getting-started/agent.html#stopping&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;有详细的描述。&lt;/p&gt;
&lt;h2 id=&quot;下一步&quot;&gt;&lt;a href=&quot;#下一步&quot; class=&quot;headerlink&quot; title=&quot;下一步&quot;&gt;&lt;/a&gt;下一步&lt;/h2&gt;&lt;p&gt;现在有了一个多节点的Consul集群已经启动并且运行着。让我们通过&lt;a href=&quot;&quot;&gt;健康检测&lt;/a&gt;使我们的服务具有更强的鲁棒性。&lt;/p&gt;
&lt;p&gt;翻译自&lt;a href=&quot;https://www.consul.io/intro/getting-started/join.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我们已经启动了我们的第一个代理并且在这个代理上注册和查询了服务。这些显示了使用Consul是多么的容易但是并没有展示Consul的可扩展性以及可用于产品级别的服务发现的基础设施。在本篇向导中，我们将建立我们第一个多成员的真实的集群。&lt;/p&gt;
&lt;p&gt;当一个Consul代理启动后，它对任何其他的节点都一无所知：它是个单独的隔离集群。为了让它感知其他的集群成员，代理必须加入一个现有的集群中去。为了加入一个现有的集群，它只需要知道一个单个的现有成员。它加入后，代理将广播该成员，并且快速发现集群中的其它成员。一个Consul代理能够加入任何其它的代理，不仅仅是那些运行在服务模式下的代理。&lt;/p&gt;
&lt;h2 id=&quot;启动代理&quot;&gt;&lt;a href=&quot;#启动代理&quot; class=&quot;headerlink&quot; title=&quot;启动代理&quot;&gt;&lt;/a&gt;启动代理&lt;/h2&gt;&lt;p&gt;为了模拟一个相对真实的集群，我们将通过&lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;启动两个节点的集群。接下来使用的Vagrantfile可以在&lt;a href=&quot;https://github.com/hashicorp/consul/tree/master/demo/vagrant-cluster&quot;&gt;Consul仓库demo&lt;/a&gt;中找到。&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://yoursite.com/categories/Development/"/>
    
    
      <category term="Consul" scheme="http://yoursite.com/tags/Consul/"/>
    
      <category term="MicroService" scheme="http://yoursite.com/tags/MicroService/"/>
    
  </entry>
  
  <entry>
    <title>Consul入门03 － 注册服务</title>
    <link href="http://yoursite.com/2016/04/26/Consul-Getting-Started-03-Services/"/>
    <id>http://yoursite.com/2016/04/26/Consul-Getting-Started-03-Services/</id>
    <published>2016-04-26T07:18:50.000Z</published>
    <updated>2016-05-01T06:10:15.000Z</updated>
    
    <content type="html">&lt;p&gt;在前面的步骤，我们运行了第一个代理，看到了集群的成员，并且查询了节点信息。在这篇指南里，我们将注册我们第一个服务并且查询这个服务。&lt;/p&gt;
&lt;h2 id=&quot;定义一个服务&quot;&gt;&lt;a href=&quot;#定义一个服务&quot; class=&quot;headerlink&quot; title=&quot;定义一个服务&quot;&gt;&lt;/a&gt;定义一个服务&lt;/h2&gt;&lt;p&gt;一个服务能够通过提供一个&lt;a href=&quot;https://www.consul.io/docs/agent/services.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;服务定义&lt;/a&gt;或者调用适当的&lt;a href=&quot;https://www.consul.io/docs/agent/http.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP API&lt;/a&gt;来注册。&lt;/p&gt;
&lt;p&gt;服务定义是最通用的注册服务方法，那么我们将使用这种方法来注册服务。我们将建构一个代理配置，前面的步骤已经描述过。&lt;/p&gt;
&lt;p&gt;首先，为Consul配置创建一个目录。Consul装载配置目录中所有的配置文件，通常在Unix系统中惯例是建立以名为 &lt;em&gt;/etc/consul.d&lt;/em&gt; 的目录（ &lt;em&gt;.d&lt;/em&gt; 后缀暗示这个目录包含了一些配置文件的集合）。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo mkdir /etc/consul.d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下一步，我们将创建一个服务定义配置文件。我们假设我们有一个名为“web”服务，它运行在80端口。另外我们为它设置一个标记，那么我们就可以通过它来查询到这个服务：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&quot;service&quot;: &amp;#123;&quot;name&quot;: &quot;web&quot;, &quot;tags&quot;: [&quot;rails&quot;], &quot;port&quot;: 80&amp;#125;&amp;#125;&#39;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;gt;/etc/consul.d/web.json&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在，我们重启代理，并提供配置目录参数：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ consul agent -dev -config-dir /etc/consul.d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;==&amp;gt; Starting Consul agent...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [INFO] agent: Synced service &lt;span class=&quot;string&quot;&gt;&#39;web&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你会注意到在输出中”synced service ‘web’”。这意味着代理已经从配置文件中装载了该服务定义，并且已经成功注册该服务到服务目录中。&lt;/p&gt;
&lt;p&gt;如果你想注册多个服务，你可以在Consul配置目录中创建多个服务定义文件。&lt;/p&gt;
&lt;h2 id=&quot;查询服务&quot;&gt;&lt;a href=&quot;#查询服务&quot; class=&quot;headerlink&quot; title=&quot;查询服务&quot;&gt;&lt;/a&gt;查询服务&lt;/h2&gt;&lt;p&gt;一旦代理启动并且服务已经同步，我们就可以使用DNS或者HTTP API来查询服务了。&lt;/p&gt;
&lt;h3 id=&quot;DNS-API&quot;&gt;&lt;a href=&quot;#DNS-API&quot; class=&quot;headerlink&quot; title=&quot;DNS API&quot;&gt;&lt;/a&gt;DNS API&lt;/h3&gt;&lt;p&gt;让我们首先使用DNS API查询我们的服务。对于DNS API，服务的DNS名称是 &lt;em&gt;NAME.service.consul&lt;/em&gt; 。默认所有的DNS名称都是在 &lt;em&gt;consul&lt;/em&gt; 名称空间下，当然这个是&lt;a href=&quot;https://www.consul.io/docs/agent/options.html#domain&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;可配置的&lt;/a&gt;。&lt;em&gt;service&lt;/em&gt; 子域名告诉Consul我们正在查询服务，并且 &lt;em&gt;NAME&lt;/em&gt; 就是要查询的服务的名称。&lt;/p&gt;
&lt;p&gt;对于我们注册的web服务，对应的查询设置就是 &lt;em&gt;web.service.consul&lt;/em&gt; ：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ dig @127.0.0.1 -p 8600 web.service.consul&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; QUESTION SECTION:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;web.service.consul.        IN  A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; ANSWER SECTION:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;web.service.consul. 0   IN  A   172.20.20.11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可以看到，一个带了节点的IP地址的 &lt;em&gt;A&lt;/em&gt; 记录被返回了，它就是可用的服务。 &lt;em&gt;A&lt;/em&gt; 记录只能包含IP地址。&lt;/p&gt;
&lt;p&gt;你也可以使用DNS API来获取完整的地址/端口的 &lt;em&gt;SRV&lt;/em&gt; 记录：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ dig @127.0.0.1 -p 8600 web.service.consul SRV&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; QUESTION SECTION:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;web.service.consul.        IN  SRV&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; ANSWER SECTION:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;web.service.consul. 0   IN  SRV 1 1 80 Armons-MacBook-Air.node.dc1.consul.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; ADDITIONAL SECTION:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Armons-MacBook-Air.node.dc1.consul. 0 IN A  172.20.20.11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SRV&lt;/em&gt; 记录显示了web服务证运行在节点 &lt;em&gt;Armons-MacBook-Air.node.dc1.consul.&lt;/em&gt; 的80端口上。额外的部分和 &lt;em&gt;A&lt;/em&gt; 记录返回的内容一样。&lt;/p&gt;
&lt;p&gt;最后，我们可以使用DNS API基于标记来过滤服务，基于标记的服务查询的格式是 &lt;em&gt;TAG.NAME.service.consul&lt;/em&gt; 。 在下面的例子里，我们请求Consul查询所有含”rails”标记的web服务。我们得到了我们注册的带有该标记的服务的响应：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ dig @127.0.0.1 -p 8600 rails.web.service.consul&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; QUESTION SECTION:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;rails.web.service.consul.      IN  A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; ANSWER SECTION:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rails.web.service.consul.   0   IN  A   172.20.20.11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;HTTP-API&quot;&gt;&lt;a href=&quot;#HTTP-API&quot; class=&quot;headerlink&quot; title=&quot;HTTP API&quot;&gt;&lt;/a&gt;HTTP API&lt;/h3&gt;&lt;p&gt;除了DNS API，HTTP API也可以用于服务查询：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl http://localhost:8500/v1/catalog/service/web&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Node&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Armons-MacBook-Air&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Address&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;172.20.20.11&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;ServiceID&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;web&quot;&lt;/span&gt;, \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;ServiceName&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;web&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;ServiceTags&quot;&lt;/span&gt;:[&lt;span class=&quot;string&quot;&gt;&quot;rails&quot;&lt;/span&gt;],&lt;span class=&quot;string&quot;&gt;&quot;ServicePort&quot;&lt;/span&gt;:80&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该目录API返回了指定节点以及指定的服务信息。就像我们马上要看到了&lt;a href=&quot;https://www.consul.io/intro/getting-started/checks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;健康检测&lt;/a&gt;，通常我们的查询只是查询那些健康的实例，这些实例都是通过了健康检测的。这也是DNS在底层做的事情。下面的查询只查询健康的实例：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl &lt;span class=&quot;string&quot;&gt;&#39;http://localhost:8500/v1/health/service/web?passing&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Node&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Armons-MacBook-Air&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Address&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;172.20.20.11&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Service&quot;&lt;/span&gt;:&amp;#123; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;ID&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;web&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Service&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;web&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Tags&quot;&lt;/span&gt;:[&lt;span class=&quot;string&quot;&gt;&quot;rails&quot;&lt;/span&gt;],&lt;span class=&quot;string&quot;&gt;&quot;Port&quot;&lt;/span&gt;:80&amp;#125;, &lt;span class=&quot;string&quot;&gt;&quot;Checks&quot;&lt;/span&gt;: ...&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;更新服务&quot;&gt;&lt;a href=&quot;#更新服务&quot; class=&quot;headerlink&quot; title=&quot;更新服务&quot;&gt;&lt;/a&gt;更新服务&lt;/h2&gt;&lt;p&gt;当配置文件修改后服务定义可以被更新，需要发送 &lt;em&gt;SIGHUP&lt;/em&gt; 信号给代理。这可以让代理更新服务而无需停止代理或者让服务查询时服务不可用。&lt;/p&gt;
&lt;p&gt;可以选择HTTP API来动态地增加，删除，以及更改服务。&lt;/p&gt;
&lt;h2 id=&quot;下一步&quot;&gt;&lt;a href=&quot;#下一步&quot; class=&quot;headerlink&quot; title=&quot;下一步&quot;&gt;&lt;/a&gt;下一步&lt;/h2&gt;&lt;p&gt;我们现在配置了一个单代理，并且注册了一个服务。进展非常不错，但是下一步我们会展示Consul里最有价值的特性，&lt;a href=&quot;&quot;&gt;设置我们第一个集群&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;翻译自&lt;a href=&quot;https://www.consul.io/intro/getting-started/services.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在前面的步骤，我们运行了第一个代理，看到了集群的成员，并且查询了节点信息。在这篇指南里，我们将注册我们第一个服务并且查询这个服务。&lt;/p&gt;
&lt;h2 id=&quot;定义一个服务&quot;&gt;&lt;a href=&quot;#定义一个服务&quot; class=&quot;headerlink&quot; title=&quot;定义一个服务&quot;&gt;&lt;/a&gt;定义一个服务&lt;/h2&gt;&lt;p&gt;一个服务能够通过提供一个&lt;a href=&quot;https://www.consul.io/docs/agent/services.html&quot;&gt;服务定义&lt;/a&gt;或者调用适当的&lt;a href=&quot;https://www.consul.io/docs/agent/http.html&quot;&gt;HTTP API&lt;/a&gt;来注册。&lt;/p&gt;
&lt;p&gt;服务定义是最通用的注册服务方法，那么我们将使用这种方法来注册服务。我们将建构一个代理配置，前面的步骤已经描述过。&lt;/p&gt;
&lt;p&gt;首先，为Consul配置创建一个目录。Consul装载配置目录中所有的配置文件，通常在Unix系统中惯例是建立以名为 &lt;em&gt;/etc/consul.d&lt;/em&gt; 的目录（ &lt;em&gt;.d&lt;/em&gt; 后缀暗示这个目录包含了一些配置文件的集合）。&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://yoursite.com/categories/Development/"/>
    
    
      <category term="Consul" scheme="http://yoursite.com/tags/Consul/"/>
    
      <category term="MicroService" scheme="http://yoursite.com/tags/MicroService/"/>
    
  </entry>
  
  <entry>
    <title>Consul入门02 － 运行Consul代理</title>
    <link href="http://yoursite.com/2016/04/25/Consul-Getting-Started-02-Run-The-Consul-Agent/"/>
    <id>http://yoursite.com/2016/04/25/Consul-Getting-Started-02-Run-The-Consul-Agent/</id>
    <published>2016-04-25T07:18:50.000Z</published>
    <updated>2016-05-01T06:10:09.000Z</updated>
    
    <content type="html">&lt;p&gt;在Consul安装完成后，必须先运行代理。该代理可以以服务器或者客户端模式运行。每个数据中心必须博阿含至少一个服务器，不过一个集群推荐3或5个服务器。一个单服务器的部署在失败的情况下会发生数据丢失因此不推荐使用。&lt;/p&gt;
&lt;p&gt;所有其他的代理运行在客户端模式。一个客户端是一个非常轻量级的进程，它注册服务，运行健康检查，以及转发查询到服务器。代理必须运行在集群中的每个节点上。&lt;/p&gt;
&lt;p&gt;更多的关于启动一个数据中心的细节，请查看&lt;a href=&quot;https://www.consul.io/docs/guides/bootstrapping.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇指导&lt;/a&gt;。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;启动代理&quot;&gt;&lt;a href=&quot;#启动代理&quot; class=&quot;headerlink&quot; title=&quot;启动代理&quot;&gt;&lt;/a&gt;启动代理&lt;/h2&gt;&lt;p&gt;为了简单起见，我们将暂时在开发者模式中启动Consul代理。这个模式可以非常容易快速地启动一个单节点的Consul环境。当然它并不是用于生产环境下并且它也不会持久任何状态。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ consul agent -dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;==&amp;gt; Starting Consul agent...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;==&amp;gt; Starting Consul agent RPC...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;==&amp;gt; Consul agent running!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         Node name: &lt;span class=&quot;string&quot;&gt;&#39;Armons-MacBook-Air&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Datacenter: &lt;span class=&quot;string&quot;&gt;&#39;dc1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Server: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; (bootstrap: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       Client Addr: 127.0.0.1 (HTTP: 8500, HTTPS: -1, DNS: 8600, RPC: 8400)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Cluster Addr: 172.20.20.11 (LAN: 8301, WAN: 8302)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Gossip encrypt: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, RPC-TLS: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, TLS-Incoming: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             Atlas: &amp;lt;disabled&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;==&amp;gt; Log data will now stream &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; as it occurs:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] raft: Node at 172.20.20.11:8300 [Follower] entering Follower state&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] serf: EventMemberJoin: Armons-MacBook-Air 172.20.20.11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] consul: adding LAN server Armons-MacBook-Air (Addr: 172.20.20.11:8300) (DC: dc1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] serf: EventMemberJoin: Armons-MacBook-Air.dc1 172.20.20.11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] consul: adding WAN server Armons-MacBook-Air.dc1 (Addr: 172.20.20.11:8300) (DC: dc1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ERR] agent: failed to sync remote state: No cluster leader&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[WARN] raft: Heartbeat timeout reached, starting election&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] raft: Node at 172.20.20.11:8300 [Candidate] entering Candidate state&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[DEBUG] raft: Votes needed: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[DEBUG] raft: Vote granted. Tally: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] raft: Election won. Tally: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] raft: Node at 172.20.20.11:8300 [Leader] entering Leader state&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] raft: Disabling EnableSingleNode (bootstrap)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] consul: cluster leadership acquired&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[DEBUG] raft: Node 172.20.20.11:8300 updated peer &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; (2): [172.20.20.11:8300]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[DEBUG] consul: reset tombstone GC to index 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] consul: New leader elected: Armons-MacBook-Air&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] consul: member &lt;span class=&quot;string&quot;&gt;&#39;Armons-MacBook-Air&#39;&lt;/span&gt; joined, marking health alive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] agent: Synced service &lt;span class=&quot;string&quot;&gt;&#39;consul&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可以看到，Consul代理已经启动并且输出了一些日志信息。从日志信息中，你可以看到我们代理运行在服务器模式并且声明集群的leadship。另外，本地的成员已经被标记为一个健康的集群成员。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OS X用户注意：Consul使用你的机器名作为默认的节点名称。如果你的机器名包涵了点，那么DNS查询该节点会不能工作，为了避免这个问题，使用&lt;em&gt;-node&lt;/em&gt;显式设置你的节点名称。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;集群成员&quot;&gt;&lt;a href=&quot;#集群成员&quot; class=&quot;headerlink&quot; title=&quot;集群成员&quot;&gt;&lt;/a&gt;集群成员&lt;/h2&gt;&lt;p&gt;如果你在另一个终端中运行 &lt;em&gt;consul members&lt;/em&gt; ,你能看到Consul集群所有的节点。我们在下一部分介绍如何加入集群，但是现在你只能看到一个成员（你自己的机器）：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ consul members&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Node                Address            Status  Type    Build     Protocol  DC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Armons-MacBook-Air  172.20.20.11:8301  alive   server  0.6.1dev  2         dc1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该命令输出显示你自己的节点，运行的地址，它的健康状态，它在集群中的角色，以及一些版本信息。另外元数据可以通过 &lt;em&gt;-detailed&lt;/em&gt; 选项来查看。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;members&lt;/em&gt; 命令选项的输出是基于 &lt;a href=&quot;https://www.consul.io/docs/internals/gossip.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gossip协议&lt;/a&gt; 的并且其内容是最终一致。也就是说，在任何时候，你在本地代理看到的内容也许与当前服务器中的状态并不是绝对一致的。如果需要强一致性的状态信息，使用&lt;a href=&quot;https://www.consul.io/docs/agent/http.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP API&lt;/a&gt;向Consul服务器发送请求：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl localhost:8500/v1/catalog/nodes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Node&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Armons-MacBook-Air&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Address&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;172.20.20.11&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;CreateIndex&quot;&lt;/span&gt;:3,&lt;span class=&quot;string&quot;&gt;&quot;ModifyIndex&quot;&lt;/span&gt;:4&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另外对于HTTP API，&lt;a href=&quot;https://www.consul.io/docs/agent/dns.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DNS接口&lt;/a&gt;也常被用来查询节点信息。注意你必须确信你的DNS能够找到Consul代理的DNS服务器，Consul代理的DNS服务器默认运行在8600端口。有关DNS实体（类似于”Armons-MacBook-Air.node.consul”）将在后面有更详细的介绍。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ dig @127.0.0.1 -p 8600 Armons-MacBook-Air.node.consul&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; QUESTION SECTION:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;Armons-MacBook-Air.node.consul.    IN  A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; ANSWER SECTION:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Armons-MacBook-Air.node.consul. 0 IN    A   172.20.20.11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;停止代理&quot;&gt;&lt;a href=&quot;#停止代理&quot; class=&quot;headerlink&quot; title=&quot;停止代理&quot;&gt;&lt;/a&gt;停止代理&lt;/h2&gt;&lt;p&gt;你能够使用 &lt;em&gt;Ctrl-C&lt;/em&gt; （中断信号）来优雅地停止代理。停止代理后，你可以看到它脱离集群并且关闭的信息。&lt;/p&gt;
&lt;p&gt;为了优雅地离开集群，Consul会通知其他的集群成员自己已经脱离了。如果你强制杀死代理的进程，那么其他的集群成员需要侦测节点是否失效。当一个成员离开，它的服务以及（checks）将从目录中移除。当一个成员失效，它的健康会简单地标记为critical，但它并不会被从目录中移除。Consul将自动尝试重新连接到失效的节点，并允许它在某些网络状况下恢复。&lt;/p&gt;
&lt;p&gt;另外，如果一个代理以服务器模式启动，优雅地离开是非常重要的，因为这可以避免潜在的可用性问题，有关&lt;a href=&quot;https://www.consul.io/docs/internals/consensus.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一致性协议&lt;/a&gt;，查看&lt;a href=&quot;https://www.consul.io/docs/guides/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;指南&lt;/a&gt;来获取更详细的关于如何安全的增加和移除服务器的信息。&lt;/p&gt;
&lt;h2 id=&quot;下一步&quot;&gt;&lt;a href=&quot;#下一步&quot; class=&quot;headerlink&quot; title=&quot;下一步&quot;&gt;&lt;/a&gt;下一步&lt;/h2&gt;&lt;p&gt;一个简单的Consul集群已经启动了，让我们获取一些&lt;a href=&quot;&quot;&gt;服务&lt;/a&gt;吧！&lt;/p&gt;
&lt;p&gt;翻译自&lt;a href=&quot;https://www.consul.io/intro/getting-started/agent.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在Consul安装完成后，必须先运行代理。该代理可以以服务器或者客户端模式运行。每个数据中心必须博阿含至少一个服务器，不过一个集群推荐3或5个服务器。一个单服务器的部署在失败的情况下会发生数据丢失因此不推荐使用。&lt;/p&gt;
&lt;p&gt;所有其他的代理运行在客户端模式。一个客户端是一个非常轻量级的进程，它注册服务，运行健康检查，以及转发查询到服务器。代理必须运行在集群中的每个节点上。&lt;/p&gt;
&lt;p&gt;更多的关于启动一个数据中心的细节，请查看&lt;a href=&quot;https://www.consul.io/docs/guides/bootstrapping.html&quot;&gt;这篇指导&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://yoursite.com/categories/Development/"/>
    
    
      <category term="Consul" scheme="http://yoursite.com/tags/Consul/"/>
    
      <category term="MicroService" scheme="http://yoursite.com/tags/MicroService/"/>
    
  </entry>
  
  <entry>
    <title>Consul入门01 － 安装Consul</title>
    <link href="http://yoursite.com/2016/04/24/Consul-Getting-Started-01-Install-Consul/"/>
    <id>http://yoursite.com/2016/04/24/Consul-Getting-Started-01-Install-Consul/</id>
    <published>2016-04-24T07:18:50.000Z</published>
    <updated>2016-05-01T06:10:02.000Z</updated>
    
    <content type="html">&lt;p&gt;Consul必须首先安装在每个节点上当该节点需要称为Consul集群中的成员。为了使得安装更容易，Consul为所有支持的平台提供了二进制安装包。本页面不描述如何从源码来编译Consul。&lt;/p&gt;
&lt;h2 id=&quot;安装Consul&quot;&gt;&lt;a href=&quot;#安装Consul&quot; class=&quot;headerlink&quot; title=&quot;安装Consul&quot;&gt;&lt;/a&gt;安装Consul&lt;/h2&gt;&lt;p&gt;为了安装Consul，需要在&lt;a href=&quot;https://www.consul.io/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载页面&lt;/a&gt;中找到和你系统匹配的包。Consul被打包成zip格式的压缩包。&lt;/p&gt;
&lt;p&gt;解压Consul zip包，复制&lt;em&gt;consul&lt;/em&gt;二进制文件到系统&lt;em&gt;PATH&lt;/em&gt;中包含的路径下，以确保它可以被执行。在Unix系统中，&lt;em&gt;~/bin&lt;/em&gt;和&lt;em&gt;/usr/local/bin&lt;/em&gt;是通常的安装路径，选择哪个依赖于你安装Consul给单个用户使用还是所有用户都可以使用。对于Windows系统，你可以安装到任意目录，不过不要忘记将安装目录加入到&lt;em&gt;%PATH%&lt;/em&gt;中去。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;OS-X&quot;&gt;&lt;a href=&quot;#OS-X&quot; class=&quot;headerlink&quot; title=&quot;OS X&quot;&gt;&lt;/a&gt;OS X&lt;/h2&gt;&lt;p&gt;如果你使用&lt;a href=&quot;http://brew.sh/#install&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;homebrew&lt;/a&gt;作为你的包管理器，你可以通过它来安装Consul：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ brew cask install consul&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果没有&lt;a href=&quot;http://caskroom.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cask plugin&lt;/a&gt;，那你可以通过下面命令安装：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ brew install caskroom/cask/brew-cask&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;验证安装&quot;&gt;&lt;a href=&quot;#验证安装&quot; class=&quot;headerlink&quot; title=&quot;验证安装&quot;&gt;&lt;/a&gt;验证安装&lt;/h2&gt;&lt;p&gt;安装Consul后，通过打开新的终端回话并且输入&lt;em&gt;consul&lt;/em&gt;是否可用来验证安装是否工作。通过执行&lt;em&gt;consul&lt;/em&gt;你应该可以看到下面类似的输出：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ consul&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;usage: consul [--version] [--help] &amp;lt;&lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt;&amp;gt; [&amp;lt;args&amp;gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Available commands are:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    agent          Runs a Consul agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    event          Fire a new event&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt;           Executes a &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; on Consul nodes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    force-leave    Forces a member of the cluster to enter the &lt;span class=&quot;string&quot;&gt;&quot;left&quot;&lt;/span&gt; state&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    info           Provides debugging information &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; operators&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    join           Tell Consul agent to join cluster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    keygen         Generates a new encryption key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    leave          Gracefully leaves the Consul cluster and shuts down&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    members        Lists the members of a Consul cluster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    monitor        Stream logs from a Consul agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reload         Triggers the agent to reload configuration files&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    version        Prints the Consul version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    watch          Watch &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; changes &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; Consul&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果终端报告&lt;em&gt;consul&lt;/em&gt;没有被找到的错误，那可能是你的&lt;em&gt;PATH&lt;/em&gt;没有被正确的设置导致的。请会到前面的步骤去检查你的&lt;em&gt;PATH&lt;/em&gt;环境变量是否包含了安装Consul目录。&lt;/p&gt;
&lt;h2 id=&quot;下一步&quot;&gt;&lt;a href=&quot;#下一步&quot; class=&quot;headerlink&quot; title=&quot;下一步&quot;&gt;&lt;/a&gt;下一步&lt;/h2&gt;&lt;p&gt;Consul已经安装完成，让我们来&lt;a href=&quot;&quot;&gt;启动代理&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;翻译自&lt;a href=&quot;https://www.consul.io/intro/getting-started/install.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Consul必须首先安装在每个节点上当该节点需要称为Consul集群中的成员。为了使得安装更容易，Consul为所有支持的平台提供了二进制安装包。本页面不描述如何从源码来编译Consul。&lt;/p&gt;
&lt;h2 id=&quot;安装Consul&quot;&gt;&lt;a href=&quot;#安装Consul&quot; class=&quot;headerlink&quot; title=&quot;安装Consul&quot;&gt;&lt;/a&gt;安装Consul&lt;/h2&gt;&lt;p&gt;为了安装Consul，需要在&lt;a href=&quot;https://www.consul.io/downloads.html&quot;&gt;下载页面&lt;/a&gt;中找到和你系统匹配的包。Consul被打包成zip格式的压缩包。&lt;/p&gt;
&lt;p&gt;解压Consul zip包，复制&lt;em&gt;consul&lt;/em&gt;二进制文件到系统&lt;em&gt;PATH&lt;/em&gt;中包含的路径下，以确保它可以被执行。在Unix系统中，&lt;em&gt;~/bin&lt;/em&gt;和&lt;em&gt;/usr/local/bin&lt;/em&gt;是通常的安装路径，选择哪个依赖于你安装Consul给单个用户使用还是所有用户都可以使用。对于Windows系统，你可以安装到任意目录，不过不要忘记将安装目录加入到&lt;em&gt;%PATH%&lt;/em&gt;中去。&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://yoursite.com/categories/Development/"/>
    
    
      <category term="Consul" scheme="http://yoursite.com/tags/Consul/"/>
    
      <category term="MicroService" scheme="http://yoursite.com/tags/MicroService/"/>
    
  </entry>
  
  <entry>
    <title>从APT中获取运行时类信息</title>
    <link href="http://yoursite.com/2016/04/14/Get-class-info-from-APT/"/>
    <id>http://yoursite.com/2016/04/14/Get-class-info-from-APT/</id>
    <published>2016-04-14T12:48:58.000Z</published>
    <updated>2016-04-25T12:44:13.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;从JDK1.6开始提供了一个新的被称为APT(Annotation Processing Tool)的工具，使用其提供的APT我们可以通过类似数据结构的方式来访问被编译的Java的源代码。&lt;/p&gt;
&lt;p&gt;利用这个新的工具提供的API我们可以在编译Java源代码的同时对现有代码进行增强和生成代码，比之以往通过运行时的反射以及通过Java的动态代理或者运行时字节码修改来增强要来的更简单并且运行时的效率要更高（指启动时间）&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;在Java程序运行时可以通过反射来获取类的Meta信息，但是在APT中处理的是Java源代码，此时无法直接获取定义在Annotation里面的类型信息，因为没有反射API可以使用。&lt;br&gt;例如我们定义了一个注解：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Target&lt;/span&gt;(ElementType.TYPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.SOURCE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; Service &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class[] value();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该注解接受一个Class的参数，注意该注解仅可见于源代码编译过程。&lt;/p&gt;
&lt;p&gt;如果想在APT中获取Service.value，下面代码是不可行的：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Service service = ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class[] cls = service.value();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行这段代码会在编译时抛出异常，因为在编译时类型信息无法直接获取，只有Native数据和String可以直接获取。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;p&gt;如何解决该问题呢？我们需要使用APT提供的*Mirror API获取Class的相关信息。&lt;/p&gt;
&lt;h3 id=&quot;获取AnnotationMirror对象&quot;&gt;&lt;a href=&quot;#获取AnnotationMirror对象&quot; class=&quot;headerlink&quot; title=&quot;获取AnnotationMirror对象&quot;&gt;&lt;/a&gt;获取AnnotationMirror对象&lt;/h3&gt;&lt;p&gt;首先获取AnnotationMirror对象：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AnnotationMirror svcAnnoMirror =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MoreElements.getAnnotationMirror(classElement, Service.class).get();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;MoreElements是Google Auto库里面的一个工具类，getAnnotationMirror方法比较简单，它返回Service Annotation对应的AnnotationMirror对象。&lt;/p&gt;
&lt;p&gt;上面的classElement是一个javax.lang.model.element.Element实例，在这里它代表了申明了Service这个Annotation的类的元素。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在APT里面，Java源代码会被解释称类似XML的结构，比如类，字段，方法，方法的参数等都会被解释称一个元素，每个元素都是Element的实例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;获取Annotation定义的元素列表&quot;&gt;&lt;a href=&quot;#获取Annotation定义的元素列表&quot; class=&quot;headerlink&quot; title=&quot;获取Annotation定义的元素列表&quot;&gt;&lt;/a&gt;获取Annotation定义的元素列表&lt;/h3&gt;&lt;p&gt;然后获取该Annotation里面定义的所有元素的列表:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Set&amp;lt;Element&amp;gt; elementSet = svcAnnoMirror.getElementValues().entrySet();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;过滤出key是value的那个元素&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (entry.getKey().getSimpleName().toString().equals(&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  AnnotationValues annoValue = entry.getValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;获取TypeElement&quot;&gt;&lt;a href=&quot;#获取TypeElement&quot; class=&quot;headerlink&quot; title=&quot;获取TypeElement&quot;&gt;&lt;/a&gt;获取TypeElement&lt;/h3&gt;&lt;p&gt;有了AnnotationValue，我们就可以取得内部的值：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;AnnotationValue&amp;gt; values = (List&amp;lt;AnnotationValue&amp;gt;) annoValue.getValue();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为我们定义了Service.value是一个Class数组，所以这里我们需要把返回值强制转换成List。&lt;/p&gt;
&lt;p&gt;为了获取Service.value里面定义的Class信息，我们需要使用TypeMirror API&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DeclaredType declaredType = (DeclaredType) value.getValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TypeElement typeElement = (TypeElement) declaredType.asElement();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有了TypeElement，我们就可以访问该类型相关的信息了，比如获取其完整类名：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typeElement.getQualifiedName().toString();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然获取它的实现的接口或者定义在它内部的方法或者字段都是可以的。&lt;/p&gt;
&lt;h3 id=&quot;完整代码&quot;&gt;&lt;a href=&quot;#完整代码&quot; class=&quot;headerlink&quot; title=&quot;完整代码&quot;&gt;&lt;/a&gt;完整代码&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AnnotationMirror svcAnnoMirror =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MoreElements.getAnnotationMirror(classElement, Service.class).get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; types = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable.from(svcAnnoMirror.getElementValues().entrySet())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .filter(entry -&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;.equals(entry.getKey().getSimpleName().toString()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .map(Map.Entry::getValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .flatMap(annoValue -&amp;gt; Observable.from((List&amp;lt;AnnotationValue&amp;gt;) annoValue.getValue()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .map(annoValue -&amp;gt; (DeclaredType) annoValue.getValue())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .map(declaredType -&amp;gt; (TypeElement) declaredType.asElement())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .map(typeElem -&amp;gt; typeElem.getQualifiedName().toString())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .subscribe(types::add, logger::error);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码使用rxJava以及Lambda表达式来简化代码。&lt;/p&gt;
&lt;p&gt;参见我的项目源码：&lt;a href=&quot;https://github.com/minjing/uapi/blob/master/uapi.kernel.annotation/src/main/java/uapi/annotation/AnnotationsHandler.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;从JDK1.6开始提供了一个新的被称为APT(Annotation Processing Tool)的工具，使用其提供的APT我们可以通过类似数据结构的方式来访问被编译的Java的源代码。&lt;/p&gt;
&lt;p&gt;利用这个新的工具提供的API我们可以在编译Java源代码的同时对现有代码进行增强和生成代码，比之以往通过运行时的反射以及通过Java的动态代理或者运行时字节码修改来增强要来的更简单并且运行时的效率要更高（指启动时间）&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://yoursite.com/categories/Development/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="APT" scheme="http://yoursite.com/tags/APT/"/>
    
      <category term="Annotation" scheme="http://yoursite.com/tags/Annotation/"/>
    
  </entry>
  
  <entry>
    <title>在GIT中创建一个空分支</title>
    <link href="http://yoursite.com/2016/04/13/Create-empty-branch-in-GIT/"/>
    <id>http://yoursite.com/2016/04/13/Create-empty-branch-in-GIT/</id>
    <published>2016-04-13T07:18:50.000Z</published>
    <updated>2016-04-15T01:32:29.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;有时候我们需要在GIT里面创建一个空分支，该分支不继承任何提交，没有父节点，完全是一个干净的分支，例如我们需要在某个分支里存放项目文档。&lt;br&gt;使用传统的git checkout命令创建的分支是有父节点的，意味着新branch包含了历史提交，所以我们无法直接使用该命令。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h2&gt;&lt;h3 id=&quot;创建分支&quot;&gt;&lt;a href=&quot;#创建分支&quot; class=&quot;headerlink&quot; title=&quot;创建分支&quot;&gt;&lt;/a&gt;创建分支&lt;/h3&gt;&lt;p&gt;使用 git checkout的–orphan参数:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git checkout --orphan doc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该命令会创建一个名为doc的分支，并且该分支下有前一个分支下的所有文件。&lt;br&gt;查看–orphan的帮助：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Create a new orphan branch, named &lt;new_branch&gt;, started from &lt;start point=&quot;&quot;&gt; and switch to it. The first commit made on the new branch will have no parents and it will be the root of a new history totally disconnected from all the other branchs and commits.&lt;/start&gt;&lt;/new_branch&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里的start point指的是你执行git checkout命令时的那个分支，当然新的分支不会指向任何以前的提交，就是它没有历史，如果你提交当前内容，那么这次提交就是这个分支的首次提交。&lt;/p&gt;
&lt;h3 id=&quot;删除所有内容&quot;&gt;&lt;a href=&quot;#删除所有内容&quot; class=&quot;headerlink&quot; title=&quot;删除所有内容&quot;&gt;&lt;/a&gt;删除所有内容&lt;/h3&gt;&lt;p&gt;我们不想提交任何内容，所以我们需要把当前内容全部删除，用git命令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git rm -rf .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;提交分支&quot;&gt;&lt;a href=&quot;#提交分支&quot; class=&quot;headerlink&quot; title=&quot;提交分支&quot;&gt;&lt;/a&gt;提交分支&lt;/h3&gt;&lt;p&gt;使用commit命令来提交分支&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git commit -am &lt;span class=&quot;string&quot;&gt;&quot;new branch for documentation&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果没有任何文件提交的话，分支是看不到的，可以创建一个新文件后再次提交则新创建的branch就会显示出来。&lt;br&gt;使用branch来查看分支是否创建成功&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git branch &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;有时候我们需要在GIT里面创建一个空分支，该分支不继承任何提交，没有父节点，完全是一个干净的分支，例如我们需要在某个分支里存放项目文档。&lt;br&gt;使用传统的git checkout命令创建的分支是有父节点的，意味着新branch包含了历史提交，所以我们无法直接使用该命令。&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="http://yoursite.com/categories/Development/"/>
    
    
      <category term="GIT" scheme="http://yoursite.com/tags/GIT/"/>
    
  </entry>
  
</feed>
